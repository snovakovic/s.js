{"version":3,"sources":["s.arr.js","s.execute.js","s.html.js","s.msg.js","s.obj.js","s.resize-watch.js","s.string.js","s.test.js"],"names":[],"mappingsjtJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACttQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnfile":"s.js","sourcesContent":["'use strict';\n\n/*****************************************************\n\t  Array Modification\n ***************************************************/\n(function (s) {\n\n  /**\n * Loop through any array\n * @example s.each([1,2,3,4,5,6,7], function(val, i) { console.log(val); } );\n */\n  s.each = function (arr, callback) {\n    for (var i = 0, l = arr.length; i < l; i++) {\n      if (callback(arr[i], i) === false) {\n        break;\n      }\n    }\n  };\n\n  /**\n * Iterate specific number of times\n * @param  {Integer}   n  number of iterations\n * @param  {Function} callback function that will be call per each iteration. use return false to break from iterations\n * @example s.iterate(10, function(i) { console.log(i); } );\n */\n  s.iterate = function (l, callback) {\n    for (var i = 0; i < l; i++) {\n      if (callback(i) === false) {\n        break;\n      }\n    }\n  };\n\n  /**\n * Remove all occurrences of element from array\n * @param arr {Array} array from where we want  to remove the values\n * @param elToRemove {...} element that we want to remove from array\n * @param max {whole number integer} max number of occurrences to remove. 1 - remove first, -1 remove last.\n  * @return {Array} new array without the removed values\n * @example s.remove( ['a', 'b', 'c', 'd', 'c'], 'c' );\n */\n  s.remove = function (arr, elToRemove, max) {\n    var pos;\n    if (max && (typeof max !== 'number' || max % 1 !== 0)) {\n      throw new Error('Invalid argument exception');\n    }\n\n    while (pos !== -1 && max !== 0) {\n      if (max) {\n        if (max >= 1) {\n          pos = arr.indexOf(elToRemove);\n          max--;\n        } else {\n          pos = arr.lastIndexOf(elToRemove);\n          max++;\n        }\n\n      } else {\n        pos = arr.indexOf(elToRemove);\n      }\n\n      pos > -1 && arr.splice(pos, 1);\n    }\n    return arr;\n  };\n\n  /**\n * Shuffle values in the array\n * @param arr {Array} input array that we want to shuffle\n * @return {Array} shuffled array\n * @example s.shuffle(['a', 'b', 'c', 'd', 'c']);\n */\n  s.shuffle = function (arr) {\n    for (var j, x, i = arr.length; i; j = parseInt(Math.random() * i), x = arr[--i], arr[i] = arr[j], arr[j] = x);\n    return arr;\n  };\n\n  /**\n * Get the new array filled with default values\n * @param val {....} default value that will fill the array\n * @return len {Integer} size of the new array\n * @example s.getFilledArray(0, 5);\n */\n  s.getFilledArray = function (val, len) {\n    var rv = new Array(len);\n    while (--len >= 0) {\n      rv[len] = val;\n    }\n    return rv;\n  };\n\n  /**\n * Returns new array containing only unique values from original array\n * Doesn't support nested objects and array\n */\n  s.unique = function (originalArr) {\n    var arr = [];\n    for (var i = 0; i < originalArr.length; i++) {\n      if (arr.indexOf(originalArr[i]) === -1) {\n        arr.push(originalArr[i]);\n      }\n    }\n    return arr;\n  };\n\n})(window.s = window.s || {});\n","'use strict';\n\n/*************************\n * s.execute aka Pesky execute method when condition becomes true\n * exampte a = false; \n * s.execute(function() { console.log('a has become true')}).when(function() { return a;}): \n * setTimeout(function(){ a= true; },30);\n ************************/\n(function (s) {\n\n  s.execute = function (executeCb) {\n    return new PeskyInstance(executeCb);\n  };\n\n  function PeskyInstance(executeCb) {\n    var _executeCb = executeCb;\n    var _conditionCb;\n    var _maxTries;\n    var _timeOut;\n    var _failCb;\n    var _doneCb;\n    var _noTries = 0;\n\n    function done() {\n      _doneCb && _doneCb();\n    }\n    function fail() {\n      _failCb && _failCb();\n      done();\n    }\n\n    function when() {\n      _noTries++;\n      if (_conditionCb()) {\n        _executeCb();\n        done();\n      } else if (!_maxTries || (_noTries < _maxTries)) {\n        setTimeout(when, _timeOut);\n      } else {\n        fail();\n      }\n    }\n\n    return {\n      when: function (conditionCb, timeOut) {\n        _timeOut = timeOut || 5;\n        _conditionCb = conditionCb;\n\n        setTimeout(when);\n        return this;\n      },\n      fail: function (failCb) {\n        _failCb = failCb;\n        return this;\n      },\n      done: function (doneCb) {\n        _doneCb = doneCb;\n        return this;\n      },\n      limit: function (maxTries) {\n        _maxTries = maxTries;\n      }\n    };\n  }\n} (window.s = window.s || {}));\n","'use strict';\n\n/*****************************************************\n   HTML modifications module part\n ***************************************************/\n(function (s) {\n\n  /**\n* Alias for document.querySelectorAll()\n* @param selector DOM selector recognizable with document.querySelectorAll\n* @example s.all('p'); select all paragraphs in page\n*/\n  s.all = function (selector) {\n    return document.querySelectorAll(selector);\n  };\n\n  /**\n  * Alias for document.querySelector()\n  * @param selector DOM selector recognizable with document.querySelector\n  * @example s.first('p'); select first paragraphs in page\n  */\n  s.first = function (selector) {\n    return document.querySelector(selector);\n  };\n\n  /**\n  * Check if element have specified class\n  * We can check for class combination by separating names with spaces \"class1 class2\"\n  * @param elem html element that we are checking\n  * @param className name of the class\n  * @return bool\n  * example s.haveClass(s.first('p'), 'testClass');\n  */\n  s.haveClass = function (elem, className) {\n    var classes = className.split(' ');\n    for (var i = 0; i < classes.length; i++) {\n      if (elem.className.indexOf(classes[i]) === -1) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n  * Add class to element\n  * @param elem that we are adding the class\n  * @param className name of the class\n  */\n  s.addClass = function (elem, className) {\n    if (!s.haveClass(elem, className)) {\n      elem.className = elem.className.length === 0 ? className : elem.className + ' ' + className;\n    }\n  };\n\n  /**\n  * Add class to element\n  * @param elem that we are adding the class\n  * @param className name of the class\n  */\n  s.removeClass = function (elem, className) {\n    elem.className = elem.className.replace(className, '');\n  };\n\n  /**\n  * Toggle class\n  * @param elem that we are toggling class\n  * @param className name of the class\n  */\n  s.toggleClass = function (elem, className) {\n    if (s.haveClass(elem, className)) {\n      s.removeClass(elem, className);\n    }\n    else {\n      s.addClass(elem, className);\n    }\n  };\n\n  /**\n  * Get and set height. It’s a lot trickier in native JS than it should be, \n  * because there are multiple APIs for getting height, and they all return slightly different measurements. \n  * The getHeight() method provided below returns the largest measurement.\n  * @param elem which height we want to get\n  * @return height in px\n  */\n  s.height = function (elem) {\n    return Math.max(elem.scrollHeight, elem.offsetHeight, elem.clientHeight);\n  };\n\n  /**\n  * Get closest DOM element up the tree that contains a class, ID, data attribute, or tag. Includes the element itself. Supported back to IE6.\n  * @param elem html element\n  * @param selector css selector\n  * @return html element that match condition or false\n  */\n  s.closest = function (elem, selector) {\n\n    var firstChar = selector.charAt(0);\n\n    // Get closest match\n    for (; elem && elem !== document; elem = elem.parentNode) {\n\n      // If selector is a class\n      if (firstChar === '.') {\n        if (s.haveClass(elem, selector.substr(1))) {\n          return elem;\n        }\n      }\n\n      // If selector is an ID\n      if (firstChar === '#') {\n        if (elem.id === selector.substr(1)) {\n          return elem;\n        }\n      }\n\n      // If selector is a data attribute\n      if (firstChar === '[') {\n        if (elem.hasAttribute(selector.substr(1, selector.length - 2))) {\n          return elem;\n        }\n      }\n\n      // If selector is a tag\n      if (elem.tagName.toLowerCase() === selector) {\n        return elem;\n      }\n\n    }\n\n    return false;\n\n  };\n\n  /**\n  * Get all siblings of the selected element\n  * @param elem html element\n  * @return list of html elements\n  */\n  s.siblings = function (elem) {\n    var siblings = [];\n    var sibling = elem.parentNode.firstChild;\n    for (; sibling; sibling = sibling.nextSibling) {\n      if (sibling.nodeType === 1 && sibling !== elem) {\n        siblings.push(sibling);\n      }\n    }\n    return siblings;\n  };\n\n})(window.s = window.s || {});\n","'use strict';\n\n/*****************************\n * sMsg - broadcast messages\n * example s.broadcast('something-happened', objToSend)\n * s.listen('something-happened', function(val) {\n *  console.log(val);\n * });\n ****************************/\n(function (s) {\n  var subscribers = [];\n\n  s.broadcast = function (to, obj) {\n    for (var i = 0; i < subscribers[to].length; i++) {\n      subscribers[to][i](obj);\n    }\n  };\n\n  s.listen = function (subscribe, cb) {\n    subscribers[subscribe] = subscribers[subscribe] ? subscribers[subscribe] : [];\n    subscribers[subscribe].push(cb);\n  };\n\n})(window.s = window.s || {});\n","'use strict';\n\n/*****************************************************\n\t  Array Modification\n ***************************************************/\n(function (s) {\n\n  /**\n    * Loop over object properties. \n    * @param arr {Object} object which properties will be looped over\n    * @example s.getProperties({prop1:'val1', prop2:'val2'}, function(key, value){console.log(key + ' >> ' + value);});\n    */\n  s.getProperties = function (obj, callback) {\n    for (var prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        if (callback(prop, obj[prop]) === false) {\n          break;\n        }\n      }\n    }\n  }\n\n\n  /**\n   * Shallow merge provided objects\n   * In case of the same property value from second object will override the value in the first object\n   * @param  {Objects} arbitrary number of objects that we want to merge\n   * @example s.merge({prop1:1,prop2:2}, {prop1:0,prop3:3}, {prop4: '4'});\n  */\n  s.merge = function () {\n    var merged = {};\n    var _merge = function (obj) {\n      for (var prop in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n          merged[prop] = obj[prop];\n        }\n      }\n    };\n    _merge(arguments[0]);\n    for (var i = 1; i < arguments.length; i++) {\n      _merge(arguments[i]);\n    }\n    return merged;\n  };\n\n  /**\n   * Same as merge. But with support for merging nested objects\n  */\n  s.deepMerge = function () {\n    var merged = {};\n    var _merge = function (obj) {\n      for (var prop in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n          if (Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n            merged[prop] = s.deepMerge(merged[prop], obj[prop]);\n          }\n          else {\n            merged[prop] = obj[prop];\n          }\n        }\n      }\n    };\n    _merge(arguments[0]);\n    for (var i = 1; i < arguments.length; i++) {\n      _merge(arguments[i]);\n    }\n    return merged;\n  };\n\n})(window.s = window.s || {});\n","'use strict';\n\n/************************************\n * MatchMedia polyfill for IE9 or below\n * ! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license\n ****************************************/\nif (!window.matchMedia) {\n\n  window.matchMedia = (function () {\n\n    // For browsers that support matchMedium api such as IE 9 and webkit\n    var styleMedia = (window.styleMedia || window.media);\n\n    // For those that don't support matchMedium\n    if (!styleMedia) {\n      var style = document.createElement('style'),\n        script = document.getElementsByTagName('script')[0],\n        info = null;\n\n      style.type = 'text/css';\n      style.id = 'matchmediajs-test';\n\n      script.parentNode.insertBefore(style, script);\n\n      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\n      info = ('getComputedStyle' in window) && window.getComputedStyle(style, null) || style.currentStyle;\n\n      styleMedia = {\n        matchMedium: function (media) {\n          var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';\n\n          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\n          if (style.styleSheet) {\n            style.styleSheet.cssText = text;\n          } else {\n            style.textContent = text;\n          }\n\n          // Test if media query is true or false\n          return info.width === '1px';\n        }\n      };\n    }\n\n    return function (media) {\n      return {\n        matches: styleMedia.matchMedium(media || 'all'),\n        media: media || 'all'\n      };\n    };\n\n  })();\n}\n\n\n/************************************\n * sResizeWatch : https://github.com/snovakovic/sResizeWatch\n * whatch for resize events - and switching between layouts. \n ****************************************/\n(function (s) {\n  var onFunctionStack = [],\n    offFunctionStack = [],\n    onceFunctionStack = [],\n    resizeEndFunctionStack = [],\n    onResizeFunctionStack = [],\n    i,\n    currentScreenSizes = [],\n    //based on bootstrap breakpoints\n    screenSizes = [\n      {\n        minWidth: 992,\n        name: 'desktop'\n      },\n      {\n        minWidth: 768,\n        maxWidth: 991,\n        name: 'tablet'\n      },\n      {\n        maxWidth: 767,\n        name: 'mobile'\n      }\n    ];\n\n  //set current screen sizes\n  function setCurrentScreenSizes() {\n    currentScreenSizes = [];\n    screenSizes.forEach(function (size) {\n      if (testSize(size)) {\n        currentScreenSizes.push(size);\n      }\n    });\n  }\n  setCurrentScreenSizes();\n\n\n  var doit;\n\n  //MAIN RESIZE EVENT LISTENER\n  window.addEventListener('resize', function () {\n    onResizeFunctionStack.forEach(function (callback) {\n      callback();\n    });\n\n    clearTimeout(doit);\n    doit = setTimeout(onScreenResize, 50);\n  }, true);\n\n  function onScreenResize() {\n\n    for (i = 0; i < screenSizes.length; i++) {\n      var size = screenSizes[i];\n      if (!currentScreenSizes.some(function (currentSize) { return currentSize.name === size.name; })) {\n        if (testSize(size)) {\n          currentScreenSizes.push(size);\n          onScreenChange(size);\n        }\n      }\n\n      // remove current screen sizes if necessary\n      var indexesToRemove = [];\n      currentScreenSizes.forEach(function (currentSize, index) {\n        if (!testSize(currentSize)) {\n          indexesToRemove.push(index);\n        }\n      });\n\n      for (var x = indexesToRemove.length - 1; x >= 0; x--) {\n        offScreenChange(currentScreenSizes[indexesToRemove[x]]);\n        currentScreenSizes.splice(indexesToRemove[x], 1);\n      }\n\n    }\n\n    /** Call any on resize end event **/\n    //this should be at the bottom in case that function use any of other sResizeFunctionalities\n    resizeEndFunctionStack.forEach(function (callback) {\n      callback();\n    });\n\n  }\n\n  function onScreenChange(screenSize) {\n    if (onFunctionStack[screenSize.name]) {\n      onFunctionStack[screenSize.name].forEach(function (callback) {\n        callback();\n      });\n    }\n    if (onceFunctionStack[screenSize.name]) {\n      onceFunctionStack[screenSize.name].forEach(function (callback) {\n        callback();\n      });\n      onceFunctionStack[screenSize.name] = [];\n    }\n  }\n\n  function offScreenChange(screenSize) {\n    if (offFunctionStack[screenSize.name]) {\n      offFunctionStack[screenSize.name].forEach(function (callback) {\n        callback();\n      });\n    }\n  }\n\n  function testSize(size) {\n    var minMatch = size.minWidth ? window.matchMedia('(min-width: ' + size.minWidth + 'px)').matches : true;\n    var maxMatch = size.maxWidth ? window.matchMedia('(max-width: ' + size.maxWidth + 'px)').matches : true;\n\n    return (minMatch && maxMatch) && (size.minWidth || size.maxWidth);\n  }\n\n  function getSize(screenSizeName) {\n    for (i = 0; i < screenSizes.length; i++) {\n      if (screenSizeName === screenSizes[i].name) {\n        return screenSizes[i];\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * PUBLIC METHODS\n   */\n  s.resizeWatch = {};\n\n  s.resizeWatch.on = function (screenSizeName, callback) {\n    this.queueOn(screenSizeName, callback);\n\n    var size = getSize(screenSizeName);\n    if (size && testSize(size)) {\n      callback();\n    }\n  };\n\n  s.resizeWatch.once = function (screenSizeName, callback) {\n    var size = getSize(screenSizeName);\n    if (size && testSize(size)) {\n      callback();\n    } else {\n      onceFunctionStack[screenSizeName] = onceFunctionStack[screenSizeName] ? onceFunctionStack[screenSizeName] : [];\n      onceFunctionStack[screenSizeName].push(callback);\n    }\n  };\n\n  s.resizeWatch.queueOn = function (screenSizeName, callback) {\n    onFunctionStack[screenSizeName] = onFunctionStack[screenSizeName] ? onFunctionStack[screenSizeName] : [];\n    onFunctionStack[screenSizeName].push(callback);\n  };\n\n  s.resizeWatch.off = function (screenSizeName, callback) {\n    this.queueOff(screenSizeName, callback);\n\n    var size = getSize(screenSizeName);\n    if (size && !testSize(size)) {\n      callback();\n    }\n  };\n\n  s.resizeWatch.queueOff = function (screenSizeName, callback) {\n    offFunctionStack[screenSizeName] = offFunctionStack[screenSizeName] ? offFunctionStack[screenSizeName] : [];\n    offFunctionStack[screenSizeName].push(callback);\n  };\n\n  s.resizeWatch.addSize = function (screenSize) {\n    if (typeof screenSize === 'object') {\n      screenSizes.push(screenSize);\n      if (testSize(screenSize)) {\n        currentScreenSizes.push(screenSize);\n      }\n    }\n  };\n\n  s.resizeWatch.onResizeEnd = function (callback) {\n    resizeEndFunctionStack.push(callback);\n  };\n\n  s.resizeWatch.onResize = function (callback) {\n    onResizeFunctionStack.push(callback);\n  };\n\n  s.resizeWatch.setNewScreenSizes = function (newScreenSizes) {\n    screenSizes = newScreenSizes;\n    setCurrentScreenSizes();\n  };\n\n  s.resizeWatch.getCurrentScreenSizes = function () {\n    return currentScreenSizes;\n  };\n\n  s.resizeWatch.is = function (screenSizeName) {\n    return currentScreenSizes.some(function (elem) {\n      return elem.name === screenSizeName;\n    });\n  };\n\n  s.resizeWatch.getAllScreenSizes = function () {\n    return screenSizes;\n  };\n\n})(window.s = window.s || {});\n\n","'use strict';\n\n/*****************************************************\n \t\t\t  String Modification.\n ***************************************************/\n(function (s) {\n\n  /**\n * Replace all occurrences in a string with a new value   \n * @param  str {String} string where occurrences will be replaced\n * @param find {String} string that we want to replace with new value    \n * @param replace {String} new string value which will replace old value   \n * @return {[string]} new string with replaced values\n * @example console.log(s.replaceAll(\"this is old value in old string\", \"old\", \"new\"))\n*/\n  s.replaceAll = function (str, find, replace) {\n    return str.replace(new RegExp(find.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replace);\n  };\n\n  /**\n   * String concatenation variation based on .net   \n   * Don't use in high intensive loops as it is much slower than normal string concatenation         \n   * @return {[string]} formatted  string\n   * @example console.log(s.format(\"Hi {0}, your rank is {1}.\", \"Foo\", 100))\n   */\n  s.format = function () {\n    var str = arguments[0],\n      length = arguments.length - 1;\n    for (var i = 0; i < length; i++) {\n      str = s.replaceAll(str, '{' + i + '}', arguments[i + 1]);\n    }\n    return str;\n  };\n\n})(window.s = window.s || {});\n","'use strict';\n\n/*****************************************************\n\t  Test Module part\n ***************************************************/\n(function (s) {\n\n  /**\n* Check if variable is initialized\n*/\n  s.isDefined = function (testVar) {\n    return typeof testVar !== 'undefined';\n  };\n\n  /**\n* Test if variable has been defined and is not empty, \n * Things that are treated as if they don't have value:\n *     1) null\n *     2) not initialized variable\n *     3) empty array\n *     4) empty object\n *     5) empty string\n *     6) string with only spaces\n*/\n  s.hasValue = function (testVar) {\n    if (typeof testVar === 'undefined' || testVar === null\n      || (typeof testVar === 'string' && testVar.trim().length === 0)) {\n      return false;\n    } \n\n    //Array and object only\n    if (typeof testVar === 'object') {\n      for (var key in testVar) {\n        if (hasOwnProperty.call(testVar, key)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    return true;\n  };\n\n  /**\n* Check if variable type is string\n*/\n  s.isString = function (testVar) {\n    return typeof testVar === 'string';\n  };\n\n  /**\n* Check if variable type is number\n*/\n  s.isNumber = function (testVar) {\n    return typeof testVar === 'number';\n  };\n\n  /**\n* Check if variable type is boolean\n*/\n  s.isBoolean = function (testVar) {\n    return typeof testVar === 'boolean';\n  };\n\n  /**\n* Check if variable type is object\n* variable type of array is also object\n* type for null returns object, but is object will return false for null\n*/\n  s.isObject = function (testVar) {\n    return typeof testVar === 'object' && testVar !== null;\n  };\n\n  /**\n* Check if variable is array. \n*/\n  s.isArray = function (testVar) {\n    return Array.isArray(testVar);\n  };\n\n  /**\n * Test string using any regular expression or by using any of defined keywords\n * @param str {string} string that will be tested\n * @param expr {string|regExpresion} expression can be defined keyword in string format or any regular expression.\n * @example s.is(\"test\", alphabetic); same as s.is(\"test\", /^[a-zA-Z ]*$/)\n*/\n  s.is = function (str, expr) {\n    var re = expr;\n    if (typeof str !== 'string') {\n      return false;\n    }\n\n    //look for keywords\n    if (typeof expr === 'string') {\n      expr = expr.trim().toLowerCase();\n\n      switch (expr) {\n        case 'alphabetic':\n          re = /^[a-zA-Z ]*$/;\n          break;\n        case 'alphanumeric':\n          re = /^[a-zA-Z0-9 ]*$/;\n          break;\n        case 'numeric':\n          re = /^[0-9 ]*$/;\n          break;\n        case 'lowercase':\n          re = /^[a-z ]*$/;\n          break;\n        case 'uppercase':\n          re = /^[A-Z ]*$/;\n          break;\n        case 'email':\n          re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n          break;\n        case 'strongpassword':\n          re = /^(?=^.{6,}$)((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.*$/;\n          break;\n        case 'ip':\n          re = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n          break;\n        default:\n          throw new Error(s.exception.invalidArgument);\n      }\n    }\n\n    return re.test(str);\n  };\n\n})(window.s = window.s || {});\n"],"sourceRoot":"/source/"}