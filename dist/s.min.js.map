{"version":3,"sources":["s.is.js","s.array.js","s.execute.js","s.msg.js","s.obj.js","s.resize-watch.js","s.string.js","s.utilities.js"],"names":["s","is","defined","testVar","empty","test","key","Object","prototype","hasOwnProperty","call","string","number","object","array","Array","isArray","arrayWithValue","length","alphabetic","str","re","alphanumeric","numeric","lowercase","uppercase","email","strongpassword","ip","window","undefined","isArrayWithValue","arr","each","callback","i","l","iterate","remove","elToRemove","max","pos","Error","indexOf","lastIndexOf","splice","shuffle","j","x","parseInt","Math","random","getFilledArray","val","len","rv","unique","originalArr","push","first","condition","last","PeskyInstance","executeCb","when","_noTries","_conditionCb","_executeCb","_maxTries","setTimeout","_timeOut","conditionCb","timeOut","this","limit","maxTries","execute","subscribers","broadcast","to","obj","listen","subscribe","cb","getProperties","prop","merge","merged","_merge","arguments","deepMerge","toString","matchMedia","styleMedia","media","style","document","createElement","script","getElementsByTagName","info","type","id","parentNode","insertBefore","getComputedStyle","currentStyle","matchMedium","text","styleSheet","cssText","textContent","width","matches","setCurrentScreenSizes","currentScreenSizes","screenSizes","forEach","size","testSize","onScreenResize","some","currentSize","name","onScreenChange","indexesToRemove","index","offScreenChange","resizeEndFunctionStack","screenSize","onFunctionStack","onceFunctionStack","offFunctionStack","minMatch","minWidth","maxMatch","maxWidth","getSize","screenSizeName","onResizeFunctionStack","doit","addEventListener","clearTimeout","resizeWatch","on","queueOn","once","off","queueOff","addSize","onResizeEnd","onResize","setNewScreenSizes","newScreenSizes","getCurrentScreenSizes","elem","getAllScreenSizes","replaceAll","find","replace","RegExp","capitalize","lowercaseRest","remainingChars","slice","toLowerCase","charAt","toUpperCase","contains","str1","str2","ignoreCase","chop","step","String","match","clean","trim","truncate","truncateStr","from","floor","getUrlParam","exec","location","search","decodeURI"],"mappings":"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","file":"s.min.js","sourcesContent":["/*****************************************************\n\t  Test Module part\n ***************************************************/\n(function(s) {\n\n  s.is = {};\n\n  s.is.defined = function(testVar) {\n    return typeof testVar !== 'undefined';\n  };\n\n  /**\n   * Test if variable has been defined and is not empty, \n   * Following will be treated as false\n   * s.is.empty(null); => true\n   * s.is.empty(undefined); => true\n   * s.is.empty({}); => true\n   * s.is.empty([]); => true\n   * s.is.empty(' '); => true\n   * s.is.empty('\\n\\t'); => true\n   * s.is.empty(null); => true\n  */\n  s.is.empty = function(testVar) {\n    if (typeof testVar === 'undefined' || testVar === null\n      || (typeof testVar === 'string' && (/^\\s*$/).test(testVar))) {\n      return true;\n    }\n\n    if (typeof testVar === 'object') {\n      for (var key in testVar) {\n        if (Object.prototype.hasOwnProperty.call(testVar, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * VAR type check\n   */\n  s.is.string = function(testVar) {\n    return typeof testVar === 'string';\n  };\n\n  s.is.number = function(testVar) {\n    return typeof testVar === 'number';\n  };\n\n  s.is.boolean = function(testVar) {\n    return typeof testVar === 'boolean';\n  };\n\n  s.is.object = function(testVar) {\n    return typeof testVar === 'object' && testVar !== null;\n  };\n\n  s.is.array = function(testVar) {\n    return testVar && Array.isArray(testVar);\n  };\n\n  s.is.arrayWithValue = function(testVar) {\n    return s.is.array(testVar) && testVar.length > 0;\n  };\n\n  /****\n  * STRING tests\n  ****/\n\n  s.is.alphabetic = function(str) {\n    var re = /^[a-zA-Z ]*$/;\n    return re.test(str);\n  };\n\n  s.is.alphanumeric = function(str) {\n    var re = /^[a-zA-Z0-9 ]*$/;\n    return re.test(str);\n  };\n\n  s.is.numeric = function(str) {\n    var re = /^[0-9 ]*$/;\n    return re.test(str);\n  };\n\n  s.is.lowercase = function(str) {\n    var re = /^[a-z ]*$/;\n    return re.test(str);\n  };\n\n  s.is.uppercase = function(str) {\n    var re = /^[A-Z ]*$/;\n    return re.test(str);\n  };\n\n  s.is.email = function(str) {\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(str);\n  };\n\n  s.is.strongpassword = function(str) {\n    var re = /^(?=^.{6,}$)((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.*$/;\n    return re.test(str);\n  };\n\n  s.is.ip = function(str) {\n    var re = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n    return re.test(str);\n  };\n\n})(window.s = window.s || {});\n","/*****************************************************\n\t  Array Modification\n ***************************************************/\n(function(s, undefined) {\n\n  /**\n  * Loop through any array\n  * @example s.each([1,2,3,4,5,6,7], function(val, i) { console.log(val); } );\n  */\n  s.each = function(arr, callback) {\n    for (var i = 0, l = arr.length; i < l; i++) {\n      if (callback(arr[i], i) === false) {\n        break;\n      }\n    }\n  };\n\n  /**\n  * Iterate specific number of times\n  * @param  {Integer}   n  number of iterations\n  * @param  {Function} callback function that will be call per each iteration. use return false to break from iterations\n  * @example s.iterate(10, function(i) { console.log(i); } );\n  */\n  s.iterate = function(l, callback) {\n    for (var i = 0; i < l; i++) {\n      if (callback(i) === false) {\n        break;\n      }\n    }\n  };\n\n  /**\n  * Remove all occurrences of element from array\n  * @param arr {Array} array from where we want  to remove the values\n  * @param elToRemove {...} element that we want to remove from array\n  * @param max {whole number integer} max number of occurrences to remove. 1 - remove first, -1 remove last.\n   * @return {Array} new array without the removed values\n  * @example s.remove( ['a', 'b', 'c', 'd', 'c'], 'c' );\n  */\n  s.remove = function(arr, elToRemove, max) {\n    var pos;\n    if (max && (typeof max !== 'number' || max % 1 !== 0)) {\n      throw new Error('Invalid argument exception');\n    }\n\n    while (pos !== -1 && max !== 0) {\n      if (max) {\n        if (max >= 1) {\n          pos = arr.indexOf(elToRemove);\n          max--;\n        } else {\n          pos = arr.lastIndexOf(elToRemove);\n          max++;\n        }\n\n      } else {\n        pos = arr.indexOf(elToRemove);\n      }\n\n      pos > -1 && arr.splice(pos, 1);\n    }\n    return arr;\n  };\n\n  /**\n  * Shuffle values in the array\n  * @param arr {Array} input array that we want to shuffle\n  * @return {Array} shuffled array\n  * @example s.shuffle(['a', 'b', 'c', 'd', 'c']);\n  */\n  s.shuffle = function(arr) {\n    for (var j, x, i = arr.length; i; j = parseInt(Math.random() * i), x = arr[--i], arr[i] = arr[j], arr[j] = x);\n    return arr;\n  };\n\n  /**\n  * Get the new array filled with default values\n  * @param val {....} default value that will fill the array\n  * @return len {Integer} size of the new array\n  * @example s.getFilledArray(0, 5);\n  */\n  s.getFilledArray = function(val, len) {\n    var rv = new Array(len);\n    while (--len >= 0) {\n      rv[len] = val;\n    }\n    return rv;\n  };\n\n  /**\n  * Returns new array containing only unique values from original array\n  * Doesn't support nested objects and array\n  */\n  s.unique = function(originalArr) {\n    var arr = [];\n    for (var i = 0; i < originalArr.length; i++) {\n      if (arr.indexOf(originalArr[i]) === -1) {\n        arr.push(originalArr[i]);\n      }\n    }\n    return arr;\n  };\n\n  /**\n  * Returns first element of array if no condition is passed, \n  * else if there is condition returns first element of array that meets condition \n  * if element is not found undefined is returned\n  */\n  s.first = function(arr, condition) {\n    if (!isArrayWithValue(arr)) {\n      return undefined;\n    }\n\n    if (condition) {\n      for (var i = 0; i < arr.length; i++) {\n        if (condition(arr[i])) {\n          return arr[i];\n        }\n      }\n    } else {\n      return arr[0]\n    }\n\n    return undefined;\n\n  };\n\n  /**\n  * Returns last element of array if no condition is passed, \n  * else if there is condition returns last element of array that meets condition \n  * if element is not found undefined is returned\n  */\n  s.last = function(arr, condition) {\n    if (!isArrayWithValue(arr)) {\n      return undefined;\n    }\n\n    if (condition) {\n      for (var i = arr.length - 1; i <= 0; i--) {\n        if (condition(arr[i])) {\n          return arr[i];\n        }\n      }\n    } else {\n      return arr[arr.length - 1]\n    }\n\n    return undefined;\n\n  };\n\n\n  /**********************\n   Helper methods\n   *************************** */\n  function isArrayWithValue(arr) {\n    return arr && Array.isArray(arr) && arr.length !== 0;\n  }\n\n\n})(window.s = window.s || {});\n","\n/*************************\n * s.execute aka Pesky \n * execute method when condition becomes true\n * example: \n ** a = false; \n ** s.execute(function() { console.log('a has become true')}).when(function() { return a;}): \n ** setTimeout(function(){ a= true; },30);\n ************************/\n(function(s) {\n\n  s.execute = function(executeCb) {\n    return new PeskyInstance(executeCb);\n  };\n\n  function PeskyInstance(executeCb) {\n    var _executeCb = executeCb;\n    var _conditionCb;\n    var _maxTries;\n    var _timeOut;\n    var _noTries = 0;\n\n    function when() {\n      _noTries++;\n      if (_conditionCb()) {\n        _executeCb();\n      } else if (!_maxTries || (_noTries < _maxTries)) {\n        setTimeout(when, _timeOut);\n      }\n    }\n\n    return {\n      when: function(conditionCb, timeOut) {\n        _timeOut = timeOut || 5;\n        _conditionCb = conditionCb;\n\n        setTimeout(when);\n        return this;\n      },\n      limit: function(maxTries) {\n        _maxTries = maxTries;\n      }\n    };\n  }\n} (window.s = window.s || {}));\n","/*****************************\n * sMsg - broadcast messages\n * example s.broadcast('something-happened', objToSend)\n * s.listen('something-happened', function(val) {\n *  console.log(val);\n * });\n ****************************/\n(function(s) {\n  var subscribers = [];\n\n  s.broadcast = function(to, obj) {\n    for (var i = 0; i < subscribers[to].length; i++) {\n      subscribers[to][i](obj);\n    }\n  };\n\n  s.listen = function(subscribe, cb) {\n    subscribers[subscribe] = subscribers[subscribe] ? subscribers[subscribe] : [];\n    subscribers[subscribe].push(cb);\n  };\n\n})(window.s = window.s || {});\n","/*****************************************************\n\t  Array Modification\n ***************************************************/\n(function(s) {\n\n  /**\n    * Loop over object properties. \n    * @param arr {Object} object which properties will be looped over\n    * @example s.getProperties({prop1:'val1', prop2:'val2'}, function(key, value){console.log(key + ' >> ' + value);});\n    */\n  s.getProperties = function(obj, callback) {\n    for (var prop in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        if (callback(prop, obj[prop]) === false) {\n          break;\n        }\n      }\n    }\n  };\n\n  /**\n   * Shallow merge provided objects\n   * In case of the same property value from second object will override the value in the first object\n   * @param  {Objects} arbitrary number of objects that we want to merge\n   * @example s.merge({prop1:1,prop2:2}, {prop1:0,prop3:3}, {prop4: '4'});\n  */\n  s.merge = function() {\n    var merged = {};\n    var _merge = function(obj) {\n      for (var prop in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n          merged[prop] = obj[prop];\n        }\n      }\n    };\n    _merge(arguments[0]);\n    for (var i = 1; i < arguments.length; i++) {\n      _merge(arguments[i]);\n    }\n    return merged;\n  };\n\n  /**\n   * Same as merge. But with support for merging nested objects\n  */\n  s.deepMerge = function() {\n    var merged = {};\n    var _merge = function(obj) {\n      for (var prop in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n          if (Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n            merged[prop] = s.deepMerge(merged[prop], obj[prop]);\n          }\n          else {\n            merged[prop] = obj[prop];\n          }\n        }\n      }\n    };\n    _merge(arguments[0]);\n    for (var i = 1; i < arguments.length; i++) {\n      _merge(arguments[i]);\n    }\n    return merged;\n  };\n\n})(window.s = window.s || {});\n","/************************************\n * MatchMedia polyfill for IE9 or below\n * ! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license\n ****************************************/\nif (!window.matchMedia) {\n\n  window.matchMedia = (function() {\n\n    // For browsers that support matchMedium api such as IE 9 and webkit\n    var styleMedia = (window.styleMedia || window.media);\n\n    // For those that don't support matchMedium\n    if (!styleMedia) {\n      var style = document.createElement('style'),\n        script = document.getElementsByTagName('script')[0],\n        info = null;\n\n      style.type = 'text/css';\n      style.id = 'matchmediajs-test';\n\n      script.parentNode.insertBefore(style, script);\n\n      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\n      info = ('getComputedStyle' in window) && window.getComputedStyle(style, null) || style.currentStyle;\n\n      styleMedia = {\n        matchMedium: function(media) {\n          var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';\n\n          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\n          if (style.styleSheet) {\n            style.styleSheet.cssText = text;\n          } else {\n            style.textContent = text;\n          }\n\n          // Test if media query is true or false\n          return info.width === '1px';\n        }\n      };\n    }\n\n    return function(media) {\n      return {\n        matches: styleMedia.matchMedium(media || 'all'),\n        media: media || 'all'\n      };\n    };\n\n  })();\n}\n\n\n/************************************\n * sResizeWatch : https://github.com/snovakovic/sResizeWatch\n * whatch for resize events - and switching between layouts. \n ****************************************/\n(function(s) {\n  var onFunctionStack = [],\n    offFunctionStack = [],\n    onceFunctionStack = [],\n    resizeEndFunctionStack = [],\n    onResizeFunctionStack = [],\n    i,\n    currentScreenSizes = [],\n    //based on bootstrap breakpoints\n    screenSizes = [\n      {\n        minWidth: 992,\n        name: 'desktop'\n      },\n      {\n        minWidth: 768,\n        maxWidth: 991,\n        name: 'tablet'\n      },\n      {\n        maxWidth: 767,\n        name: 'mobile'\n      }\n    ];\n\n  //set current screen sizes\n  function setCurrentScreenSizes() {\n    currentScreenSizes = [];\n    screenSizes.forEach(function(size) {\n      if (testSize(size)) {\n        currentScreenSizes.push(size);\n      }\n    });\n  }\n  setCurrentScreenSizes();\n\n\n  var doit;\n\n  //MAIN RESIZE EVENT LISTENER\n  window.addEventListener('resize', function() {\n    onResizeFunctionStack.forEach(function(callback) {\n      callback();\n    });\n\n    clearTimeout(doit);\n    doit = setTimeout(onScreenResize, 50);\n  }, true);\n\n  function onScreenResize() {\n\n    for (i = 0; i < screenSizes.length; i++) {\n      var size = screenSizes[i];\n      if (!currentScreenSizes.some(function(currentSize) { return currentSize.name === size.name; })) {\n        if (testSize(size)) {\n          currentScreenSizes.push(size);\n          onScreenChange(size);\n        }\n      }\n\n      // remove current screen sizes if necessary\n      var indexesToRemove = [];\n      currentScreenSizes.forEach(function(currentSize, index) {\n        if (!testSize(currentSize)) {\n          indexesToRemove.push(index);\n        }\n      });\n\n      for (var x = indexesToRemove.length - 1; x >= 0; x--) {\n        offScreenChange(currentScreenSizes[indexesToRemove[x]]);\n        currentScreenSizes.splice(indexesToRemove[x], 1);\n      }\n\n    }\n\n    /** Call any on resize end event **/\n    //this should be at the bottom in case that function use any of other sResizeFunctionalities\n    resizeEndFunctionStack.forEach(function(callback) {\n      callback();\n    });\n\n  }\n\n  function onScreenChange(screenSize) {\n    if (onFunctionStack[screenSize.name]) {\n      onFunctionStack[screenSize.name].forEach(function(callback) {\n        callback();\n      });\n    }\n    if (onceFunctionStack[screenSize.name]) {\n      onceFunctionStack[screenSize.name].forEach(function(callback) {\n        callback();\n      });\n      onceFunctionStack[screenSize.name] = [];\n    }\n  }\n\n  function offScreenChange(screenSize) {\n    if (offFunctionStack[screenSize.name]) {\n      offFunctionStack[screenSize.name].forEach(function(callback) {\n        callback();\n      });\n    }\n  }\n\n  function testSize(size) {\n    var minMatch = size.minWidth ? window.matchMedia('(min-width: ' + size.minWidth + 'px)').matches : true;\n    var maxMatch = size.maxWidth ? window.matchMedia('(max-width: ' + size.maxWidth + 'px)').matches : true;\n\n    return (minMatch && maxMatch) && (size.minWidth || size.maxWidth);\n  }\n\n  function getSize(screenSizeName) {\n    for (i = 0; i < screenSizes.length; i++) {\n      if (screenSizeName === screenSizes[i].name) {\n        return screenSizes[i];\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * PUBLIC METHODS\n   */\n  s.resizeWatch = {};\n\n  s.resizeWatch.on = function(screenSizeName, callback) {\n    this.queueOn(screenSizeName, callback);\n\n    var size = getSize(screenSizeName);\n    if (size && testSize(size)) {\n      callback();\n    }\n  };\n\n  s.resizeWatch.once = function(screenSizeName, callback) {\n    var size = getSize(screenSizeName);\n    if (size && testSize(size)) {\n      callback();\n    } else {\n      onceFunctionStack[screenSizeName] = onceFunctionStack[screenSizeName] ? onceFunctionStack[screenSizeName] : [];\n      onceFunctionStack[screenSizeName].push(callback);\n    }\n  };\n\n  s.resizeWatch.queueOn = function(screenSizeName, callback) {\n    onFunctionStack[screenSizeName] = onFunctionStack[screenSizeName] ? onFunctionStack[screenSizeName] : [];\n    onFunctionStack[screenSizeName].push(callback);\n  };\n\n  s.resizeWatch.off = function(screenSizeName, callback) {\n    this.queueOff(screenSizeName, callback);\n\n    var size = getSize(screenSizeName);\n    if (size && !testSize(size)) {\n      callback();\n    }\n  };\n\n  s.resizeWatch.queueOff = function(screenSizeName, callback) {\n    offFunctionStack[screenSizeName] = offFunctionStack[screenSizeName] ? offFunctionStack[screenSizeName] : [];\n    offFunctionStack[screenSizeName].push(callback);\n  };\n\n  s.resizeWatch.addSize = function(screenSize) {\n    if (typeof screenSize === 'object') {\n      screenSizes.push(screenSize);\n      if (testSize(screenSize)) {\n        currentScreenSizes.push(screenSize);\n      }\n    }\n  };\n\n  s.resizeWatch.onResizeEnd = function(callback) {\n    resizeEndFunctionStack.push(callback);\n  };\n\n  s.resizeWatch.onResize = function(callback) {\n    onResizeFunctionStack.push(callback);\n  };\n\n  s.resizeWatch.setNewScreenSizes = function(newScreenSizes) {\n    screenSizes = newScreenSizes;\n    setCurrentScreenSizes();\n  };\n\n  s.resizeWatch.getCurrentScreenSizes = function() {\n    return currentScreenSizes;\n  };\n\n  s.resizeWatch.is = function(screenSizeName) {\n    return currentScreenSizes.some(function(elem) {\n      return elem.name === screenSizeName;\n    });\n  };\n\n  s.resizeWatch.getAllScreenSizes = function() {\n    return screenSizes;\n  };\n\n})(window.s = window.s || {});\n\n","/*****************************************************\n \t\t\t  String Modification.\n ***************************************************/\n(function(s) {\n\n  /**\n  * Replace all occurrences in a string with a new value   \n  * @param  str {String} string where occurrences will be replaced\n  * @param find {String} string that we want to replace with new value    \n  * @param replace {String} new string value which will replace old value   \n  * @return {[string]} new string with replaced values\n  * @example console.log(s.replaceAll(\"this is old value in old string\", \"old\", \"new\"))\n   */\n  s.replaceAll = function(str, find, replace) {\n    return str.replace(new RegExp(find.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replace);\n  };\n\n\n  /***********************************************\n   * Below methods has been taken from\n   * https://github.com/epeli/underscore.string\n  ************************************************/\n\n  /*\n   * Converts first letter of the string to uppercase. If true is passed as second argument the rest of the string will be converted to lower case.\n   * @example capitalize(\"foo Bar\"); => \"Foo Bar\"; capitalize(\"FOO Bar\", true); => \"Foo bar\"\n   * https://github.com/epeli/underscore.string\n  */\n  s.capitalize = function(str, lowercaseRest) {\n    var remainingChars = !lowercaseRest ? str.slice(1) : str.slice(1).toLowerCase();\n    return str.charAt(0).toUpperCase() + remainingChars;\n  };\n\n  /*\n   * test if string contains substring\n   * @ignore case - case is ignored on comparation\n   * @example capitalize('foo Bar', 'oo'); => 'Foo Bar'; capitalize('FOO Bar', true); => 'Foo bar'\n   * https://github.com/epeli/underscore.string\n  */\n  s.contains = function(str1, str2, ignoreCase) {\n    if (ignoreCase === true) {\n      str1 = str1.toLowerCase();\n      str2 = str2.toLowerCase();\n    }\n    return str1.indexOf(str2) !== -1;\n  };\n\n  /*\n   * Break string in array of substring \n   * @example: chop(\"whitespace\", 3); => ['whi', 'tes', 'pac', 'e']\n  */\n  s.chop = function(str, step) {\n    if (!str) {\n      return [];\n    }\n    str = String(str);\n    step = ~~step;\n    return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];\n  };\n\n  /*\n  * Trim and replace multiple spaces with a single space.\n  * @example clean(' foo    bar   '); => 'foo bar'\n  */\n  s.clean = function(str) {\n    return str.trim().replace(/\\s\\s+/g, ' ');\n  };\n\n\n  /**\n  * Truncate string if it exceed max number of caracters, \n  * apply provided truncate string at the end of truncated string (default: '...')\n  */\n  s.truncate = function(str, length, truncateStr) {\n    truncateStr = truncateStr || '...';\n    length = ~~length;\n    return str.length > length ? str.slice(0, length) + truncateStr : str;\n  };\n\n\n})(window.s = window.s || {});\n","/*****************************************************\n   Utilities\n ***************************************************/\n(function(s) {\n\n  /**\n\t* Returns random number using Math.random() between 2 numbers\n\t* @param from {string} min number\n\t* @param to {string|regExpresion} max number\n\t* @example s.random(1, 10); get random number between 1 and 10 (1 and 10 are included)\n\t*/\n  s.random = function(from, to) {\n    return Math.floor(Math.random() * (to - from + 1) + from);\n  };\n\n  /**\n  * Get the parameter from URL by the name\n  * @param key {string} the key for which value will be retrieved\n  * @example s.getUrlParam(\"firstName\"); \n  */\n  s.getUrlParam = function(key) {\n    var val = RegExp(key + '=' + '(.+?)(&|$)').exec(location.search) || null;\n    if (val === null) {\n      return null;\n    }\n    return decodeURI(val[1]);\n  };\n\n})(window.s = window.s || {});\n"],"sourceRoot":"/source/"}